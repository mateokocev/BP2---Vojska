
-- MK
-- TRIGGER za popravljanje datuma učlanjenja
DELIMITER //
CREATE TRIGGER legalno_u_vojski
    AFTER INSERT ON osoblje
    FOR EACH ROW
BEGIN
    IF new.datum_rodenja > new.datum_uclanjenja THEN
    
        SET new.datum_uclanjenja = DATE_ADD(new.datum_uclanjenja, INTERVAL 18 YEAR);
        
        dodaj_dok_legalno: LOOP
            IF TIMESTAMPDIFF(YEAR, new.datum_uclanjenja, new.datum_rodenja) > 18 THEN
                LEAVE dodaj_dok_legalno;
            END IF;
            SET new.datum_uclanjenja = DATE_ADD(new.datum_uclanjenja, INTERVAL 3 YEAR);
        END LOOP;
    END IF;

        
END //
DELIMITER ;






-- DK
Datum početka ture ne može biti veći ili jednak od datuma kraja ture.
Idemo ih uspoređivat samo uz uvjet da kraj nije NULL.              
U slučaju da je kraj NULL to znači da je tura još uvijek u tijeku. Riječ je o UPDATE-u.                                                              */

DROP TRIGGER IF EXISTS u_tura_vrijeme;

DELIMITER //
CREATE TRIGGER u_tura_vrijeme
    BEFORE UPDATE ON tura
    FOR EACH ROW
BEGIN
    IF new.vrijeme_pocetka >= new.vrijeme_kraja AND new.vrijeme_kraja != NULL THEN
	SIGNAL SQLSTATE '40000'
        SET MESSAGE_TEXT = 'Neispravno je uneseno vrijeme pocetka ili/i kraja misije';
    END IF;
END//
DELIMITER ;

		
                                                                                                                                  /*
Datum početka misije ne može biti veći ili jednak od datuma kraja misije.
Idemo ih uspoređivat samo uz uvjet da kraj nije NULL.              
U slučaju da je kraj NULL to znači da je misija još uvijek u tijeku. Riječ je o UPDATE-u.                                                             */

DROP TRIGGER IF EXISTS u_mis_vrijeme;

DELIMITER //
CREATE TRIGGER u_mis_vrijeme
    BEFORE UPDATE ON misija
    FOR EACH ROW
BEGIN
    IF new.vrijeme_pocetka >= new.vrijeme_kraja AND new.vrijeme_kraja != NULL THEN
	SIGNAL SQLSTATE '40000'
        SET MESSAGE_TEXT = 'Neispravno je uneseno vrijeme pocetka ili/i kraja misije';
    END IF;
END//
DELIMITER ;



																																	  /*
Datum početka sudjelovanja osoblja na turi ne može biti veći ili jednak od datuma kraja sudjelovanja.
Idemo ih uspoređivat samo uz uvjet da kraj nije NULL.              
U slučaju da je kraj NULL to znači da osoba još uvijek sudjeluje u turi. Riječ je o UPDATE-u.                                                              */

DROP TRIGGER IF EXISTS u_ont_vrijeme;

DELIMITER //
CREATE TRIGGER u_ont_vrijeme
    BEFORE UPDATE ON osoblje_na_turi
    FOR EACH ROW
BEGIN
	IF new.datum_pocetka >= new.datum_kraja AND new.datum_kraja != NULL THEN
		SIGNAL SQLSTATE '40000'
                SET MESSAGE_TEXT = 'Neispravno je uneseno vrijeme pocetka ili/i kraja sudjelovanja osoblja na turi!';
        END IF;
END//
DELIMITER ;



																																	/*
Datum početka popravka ne može biti veći ili jednak od datuma kraja popravka.
Idemo ih uspoređivat samo uz uvjet da kraj nije NULL.              
U slučaju da je kraj NULL to znači da je popravak još uvijek u tijeku. Riječ je o INSERT-u.                                                            */

DROP TRIGGER IF EXISTS i_po_vrijeme;

DELIMITER //
CREATE TRIGGER i_po_vrijeme
    BEFORE INSERT ON popravak
    FOR EACH ROW
BEGIN
	IF new.pocetak_popravka >= new.kraj_popravka AND new.kraj_popravka != NULL THEN
		SIGNAL SQLSTATE '40000'
                SET MESSAGE_TEXT = 'Neispravno je uneseno vrijeme pocetka ili/i kraja popravka!';
        END IF;
END//
DELIMITER ;



																																 /*
Datum početka treninga ne može biti veći ili jednak od datuma kraja treninga te trening bi najmanje trebao trajat 20 min.
Riječ o INSERT-u.                                                                                                                */

DROP TRIGGER IF EXISTS i_tr_vrijeme;

DELIMITER //
CREATE TRIGGER i_tr_vrijeme
    BEFORE INSERT ON trening
    FOR EACH ROW
BEGIN
    IF new.vrijeme_pocetka >= new.vrijeme_kraja OR TIMESTAMPDIFF(MINUTE, new.vrijeme_pocetka, new.vrijeme_kraja) < 20 THEN
	SIGNAL SQLSTATE '40000'
        SET MESSAGE_TEXT = 'Neispravno je uneseno vrijeme pocetka ili/i kraja treninga!';
    END IF;
END//
DELIMITER ;



                                                                                                                                    /*
Datum početka lijecenja ne može biti veći ili jednak od datuma kraja liječenja kada je riječ o INSERT-u. 
Idemo ih uspoređivat samo uz uvjet da kraj nije NULL.
U slučaju je datum kraja liječenja NULL to znači da je liječenje još uvijek u tijeku.                                                */

DROP TRIGGER IF EXISTS i_li_vrijeme;                                                                                                      

DELIMITER //
CREATE TRIGGER li_vrijeme
    BEFORE INSERT ON lijecenje
    FOR EACH ROW
BEGIN
    IF new.pocetak_lijecenja >= new.kraj_lijecenja AND new.kraj_lijecenja != NULL THEN
	 SIGNAL SQLSTATE '40000'
         SET MESSAGE_TEXT = 'Neispravno je uneseno vrijeme pocetka ili/i kraja lijecenja!';
    END IF;
END//
DELIMITER ;





-- imamo: id 3, 4 pistolja te kosirnik bespotrebno dodaje id 5 s 3 pistolja. Stvaramo okidac koji ce tih 3 zbrojit s 5 zato jer
-- korisnik nije ispravno postupio. Tezimo tome da baza bude optimalna te da optimalno radi
/*
DROP TRIGGER IF EXISTS postoji;

DELIMITER //
CREATE TRIGGER postoji
    AFTER INSERT ON oprema
    FOR EACH ROW
BEGIN
    DECLARE br INTEGER;

    SELECT COUNT(*) INTO br
    FROM oprema
    WHERE naziv = new.naziv;


    IF br > 1 THEN
        UPDATE oprema SET ukupna_kolicina = ukupna_kolicina + new.ukupna_kolicina WHERE naziv = new.naziv;
    END IF;

    DELETE FROM oprema WHERE id = new.id;
END//
DELIMITER ;
*/



-- Prati se da zbroj izdane količine željene opreme ne bude veći od sveukupne moguće količine opreme tijekom INSERT-a

DROP TRIGGER IF EXISTS kop;

DELIMITER //
CREATE TRIGGER kop
    BEFORE INSERT ON izdana_oprema
    FOR EACH ROW
BEGIN
    DECLARE br INTEGER;
    DECLARE uk INTEGER;

    SELECT SUM(izdana_kolicina) INTO br
    FROM izdana_oprema
    WHERE id_oprema = new.id_oprema;

    SELECT ukupna_kolicina INTO uk
    FROM oprema
    WHERE id = new.id_oprema;

    IF br + new.izdana_kolicina > uk THEN
	SIGNAL SQLSTATE '40000'
        SET MESSAGE_TEXT = 'Oprema koju zelite unijeti nije dostupna u zeljenoj kolicini!';
    END IF;
END//
DELIMITER ;





-- Prati se da zbroj izdane količine ne bude veći od sveukupne moguće količine opreme tijekom UPDATE-a

DROP TRIGGER IF EXISTS ukop;

DELIMITER //
CREATE TRIGGER ukop
    BEFORE UPDATE ON izdana_oprema
    FOR EACH ROW
BEGIN
    DECLARE br INTEGER;
    DECLARE uk INTEGER;

    SELECT SUM(izdana_kolicina) INTO br
    FROM izdana_oprema
    WHERE id_oprema = new.id_oprema;


    SELECT ukupna_kolicina INTO uk
    FROM oprema
    WHERE id = new.id_oprema;

    IF (br - old.izdana_kolicina) + new.izdana_kolicina > uk THEN
	SIGNAL SQLSTATE '40000'
        SET MESSAGE_TEXT = 'Ne mozete promijenit kolicinu zeljene opreme koja je izdana osobi zato jer nije dostupna u toj kolicini!';
    END IF;
END//
DELIMITER ;


