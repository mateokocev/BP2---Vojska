
-- MK
-- TRIGGER za popravljanje datuma učlanjenja
DELIMITER //
CREATE TRIGGER legalno_u_vojski
    AFTER INSERT ON osoblje
    FOR EACH ROW
BEGIN
    IF new.datum_rodenja > new.datum_uclanjenja THEN
    
        SET new.datum_uclanjenja = DATE_ADD(new.datum_uclanjenja, INTERVAL 18 YEAR);
        
        dodaj_dok_legalno: LOOP
            IF TIMESTAMPDIFF(YEAR, new.datum_uclanjenja, new.datum_rodenja) > 18 THEN
                LEAVE dodaj_dok_legalno;
            END IF;
            SET new.datum_uclanjenja = DATE_ADD(new.datum_uclanjenja, INTERVAL 3 YEAR);
        END LOOP;
    END IF;

        
END //
DELIMITER ;


-- Ovaj trigger provjerava ako vojnik nije na aktivnoj turi, te ako nije, postavlja njegov status na "Neaktivan"
DELIMITER //
CREATE TRIGGER updtstatus_post_tura AFTER UPDATE ON tura
FOR EACH ROW
BEGIN
	IF new.datum_kraja != NULL THEN
		UPDATE osoblje
			SET status_osoblja = "Neaktivan" WHERE id IN (SELECT id_osoblje FROM osoblje_na_turi WHERE id_tura = NEW.id AND datum_kraja IS NULL);
	END IF;
END//
DELIMITER ;


-- Ovaj trigger postavlja datum_kraja osoblja na turi na isti datum kraja ko i tura koja je završila samo ako to osoblje na turi ima datum_kraja NULL tj. nije se povuklo prije kraja ture i ostalo je tijekom cijele ture
DELIMITER //
CREATE TRIGGER updtkraj_post_tura AFTER UPDATE ON tura
FOR EACH ROW
BEGIN
	IF NEW.datum_kraja != NULL THEN
		UPDATE osoblje_na_turi 
			SET datum_kraja = NEW.datum_kraja 
				WHERE id_tura = NEW.id AND datum_kraja IS NULL;
	END IF;
END//
DELIMITER ;


-- kada vojnik ide na misiju poslužuje se tom osoblju na misiji osnovnu opremu, imamo funkciju koja provjerava dostupne id-eve te ih vraca u trigger kako bi mogli izvesti uspjesan insert. Također ima 
DELIMITER //
CREATE FUNCTION dostupni_id_izdana_oprema() RETURNS INTEGER
BEGIN
    DECLARE id_dostupnost INTEGER DEFAULT 5000;
    DECLARE dostupan_id INTEGER;
    
    WHILE dostupan_id != NULL DO
        SET id_dostupnost = id_dostupnost + 1;
        
        SELECT id INTO dostupan_id
            FROM izdana_oprema
            WHERE id = id_dostupnost;
    END WHILE;
    
    RETURN id_dostupnost;
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER minoprema_pre_misija AFTER INSERT ON osoblje_na_misiji
FOR EACH ROW
BEGIN
    DECLARE rand_samokres INTEGER;
	SELECT FLOOR(1001 + RAND() * (1003-1001)) INTO rand_samokres;
    
    -- garantira jedan od dva dostupna samokresa
	INSERT INTO izdana_oprema(id, id_oprema, id_osoblje_na_misiji, izdana_kolicina)
    VALUES(dostupni_id_izdana_oprema(), rand_samokres, NEW.id, 1);
    -- garantira kacigu
	INSERT INTO izdana_oprema(id, id_oprema, id_osoblje_na_misiji, izdana_kolicina)
    VALUES(dostupni_id_izdana_oprema(), 1358, NEW.id, 1);
    -- garantira pancirku
	INSERT INTO izdana_oprema(id, id_oprema, id_osoblje_na_misiji, izdana_kolicina)
    VALUES(dostupni_id_izdana_oprema(), 1359, NEW.id, 1);
    -- garantira uniformu
	INSERT INTO izdana_oprema(id, id_oprema, id_osoblje_na_misiji, izdana_kolicina)
    VALUES(dostupni_id_izdana_oprema(), 1360, NEW.id, 1);
    -- garantira čizme
	INSERT INTO izdana_oprema(id, id_oprema, id_osoblje_na_misiji, izdana_kolicina)
    VALUES(dostupni_id_izdana_oprema(), 1363, NEW.id, 1);
END//
DELIMITER ;


-- promjena odgovornog za vozilo u slučaju ranog povlačenja iz ture. Uzme rezultat za novog odgovornog i spremi ga u @zamjena te ako nije null updatea id_odgovorni.
DELIMITER //
CREATE TRIGGER promjena_odgovornog AFTER UPDATE ON osoblje_na_turi
FOR EACH ROW
BEGIN
	IF NEW.datum_kraja != NULL AND OLD.datum_kraja = NULL THEN
		SELECT id INTO @zamjena
			FROM osoblje_na_turi
				WHERE datum_kraja IS NULL AND id_tura = OLD.id_tura
                LIMIT 1;

		IF @zamjena != NULL THEN
			UPDATE vozilo_na_turi
				SET id_odgovorni = @zamjena
					WHERE id_odgovorni = OLD.id;
		ELSE
		  SIGNAL SQLSTATE '40000' 
			SET MESSAGE_TEXT = 'Nije pronađena zamjena, moguće da je došlo do greške ili je tura gotova';
		END IF;
	END IF;
END//
DELIMITER ;


-- Provjerava je li osoblje koje se salje na misiju uopce dostupno s time da broji koliko ima aktivnih misija tj. koliko misija kojima je datum kraja na NULL
DELIMITER //
CREATE TRIGGER dostupnost_osoblja BEFORE INSERT ON osoblje_na_misiji
FOR EACH ROW
BEGIN
	
	SELECT COUNT(id) INTO @dostupan
        FROM osoblje_na_misiji AS onm
        INNER JOIN osoblje AS o ON onm.id_osoblje = o.id
        INNER JOIN osoblje_na_turi AS ont ON o.id = ont.id_osoblje
			WHERE onm.id_osoblje = NEW.id_osoblje AND ont.id_osoblje = NEW.id_osoblje AND onm.datum_kraja = NULL;
	IF @dostupan > 0 THEN
		SIGNAL SQLSTATE '40000'
			SET MESSAGE_TEXT = 'Osoblje nije dostupno za novu misiju';
	END IF;
END//
DELIMITER ;






-- DK
																															    /*
Datum početka ture ne može biti veći ili jednak od datuma kraja ture.
Idemo ih uspoređivat samo uz uvjet da kraj nije NULL.              
U slučaju da je kraj NULL to znači da je tura još uvijek u tijeku. Riječ je o UPDATE-u.                                                              */

DROP TRIGGER IF EXISTS u_tura_vrijeme;

DELIMITER //
CREATE TRIGGER u_tura_vrijeme
    BEFORE UPDATE ON tura
    FOR EACH ROW
BEGIN
    IF new.vrijeme_pocetka >= new.vrijeme_kraja AND new.vrijeme_kraja != NULL THEN
	SIGNAL SQLSTATE '40000'
        SET MESSAGE_TEXT = 'Neispravno je uneseno vrijeme pocetka ili/i kraja misije';
    END IF;
END//
DELIMITER ;

		
                                                                                                                                  /*
Datum početka misije ne može biti veći ili jednak od datuma kraja misije.
Idemo ih uspoređivat samo uz uvjet da kraj nije NULL.              
U slučaju da je kraj NULL to znači da je misija još uvijek u tijeku. Riječ je o UPDATE-u.                                                             */

DROP TRIGGER IF EXISTS u_mis_vrijeme;

DELIMITER //
CREATE TRIGGER u_mis_vrijeme
    BEFORE UPDATE ON misija
    FOR EACH ROW
BEGIN
    IF new.vrijeme_pocetka >= new.vrijeme_kraja AND new.vrijeme_kraja != NULL THEN
	SIGNAL SQLSTATE '40000'
        SET MESSAGE_TEXT = 'Neispravno je uneseno vrijeme pocetka ili/i kraja misije';
    END IF;
END//
DELIMITER ;



																																	  /*
Datum početka sudjelovanja osoblja na turi ne može biti veći ili jednak od datuma kraja sudjelovanja.
Idemo ih uspoređivat samo uz uvjet da kraj nije NULL.              
U slučaju da je kraj NULL to znači da osoba još uvijek sudjeluje u turi. Riječ je o UPDATE-u.                                                              */

DROP TRIGGER IF EXISTS u_ont_vrijeme;

DELIMITER //
CREATE TRIGGER u_ont_vrijeme
    BEFORE UPDATE ON osoblje_na_turi
    FOR EACH ROW
BEGIN
	IF new.datum_pocetka >= new.datum_kraja AND new.datum_kraja != NULL THEN
		SIGNAL SQLSTATE '40000'
                SET MESSAGE_TEXT = 'Neispravno je uneseno vrijeme pocetka ili/i kraja sudjelovanja osoblja na turi!';
        END IF;
END//
DELIMITER ;



																																	/*
Datum početka popravka ne može biti veći ili jednak od datuma kraja popravka.
Idemo ih uspoređivat samo uz uvjet da kraj nije NULL.              
U slučaju da je kraj NULL to znači da je popravak još uvijek u tijeku. Riječ je o INSERT-u.                                                            */

DROP TRIGGER IF EXISTS i_po_vrijeme;

DELIMITER //
CREATE TRIGGER i_po_vrijeme
    BEFORE INSERT ON popravak
    FOR EACH ROW
BEGIN
	IF new.pocetak_popravka >= new.kraj_popravka AND new.kraj_popravka != NULL THEN
		SIGNAL SQLSTATE '40000'
                SET MESSAGE_TEXT = 'Neispravno je uneseno vrijeme pocetka ili/i kraja popravka!';
        END IF;
END//
DELIMITER ;



																																 /*
Datum početka treninga ne može biti veći ili jednak od datuma kraja treninga te trening bi najmanje trebao trajat 20 min.
Riječ o INSERT-u.                                                                                                                */

DROP TRIGGER IF EXISTS i_tr_vrijeme;

DELIMITER //
CREATE TRIGGER i_tr_vrijeme
    BEFORE INSERT ON trening
    FOR EACH ROW
BEGIN
    IF new.vrijeme_pocetka >= new.vrijeme_kraja OR TIMESTAMPDIFF(MINUTE, new.vrijeme_pocetka, new.vrijeme_kraja) < 20 THEN
	SIGNAL SQLSTATE '40000'
        SET MESSAGE_TEXT = 'Neispravno je uneseno vrijeme pocetka ili/i kraja treninga!';
    END IF;
END//
DELIMITER ;



                                                                                                                                    /*
Datum početka lijecenja ne može biti veći ili jednak od datuma kraja liječenja kada je riječ o INSERT-u. 
Idemo ih uspoređivat samo uz uvjet da kraj nije NULL.
U slučaju je datum kraja liječenja NULL to znači da je liječenje još uvijek u tijeku.                                                */

DROP TRIGGER IF EXISTS i_li_vrijeme;                                                                                                      

DELIMITER //
CREATE TRIGGER li_vrijeme
    BEFORE INSERT ON lijecenje
    FOR EACH ROW
BEGIN
    IF new.pocetak_lijecenja >= new.kraj_lijecenja AND new.kraj_lijecenja != NULL THEN
	 SIGNAL SQLSTATE '40000'
         SET MESSAGE_TEXT = 'Neispravno je uneseno vrijeme pocetka ili/i kraja lijecenja!';
    END IF;
END//
DELIMITER ;




																																	/*
Napraviti okidač koji će u slučaju da korisnik unese opremu koja je već unešena zbrojit količinu opreme.
Npr u skladištu već postoji (1330, "RBG-6", "Bacač granata", 124) te korisnik unosi (1370, "RBG-6", "Bacač granata", 6).
To je "nepotrebno" te stoga okidač pridodaje dodatnu količinu onoj već postojećoj tj (1330, "RBG-6", "Bacač granata", 130).         */

DROP TRIGGER IF EXISTS postoji;

DELIMITER //
CREATE TRIGGER postoji
    AFTER INSERT ON oprema
    FOR EACH ROW
BEGIN
    DECLARE br INTEGER;

    SELECT COUNT(*) INTO br
    FROM oprema
    WHERE naziv = new.naziv;

    IF br > 1 THEN
        UPDATE oprema SET ukupna_kolicina = ukupna_kolicina + new.ukupna_kolicina WHERE naziv = new.naziv;
        DELETE FROM oprema WHERE id = new.id;
    END IF;
END//
DELIMITER ;



																																	/*
Prati se da zbroj količine željene izdane opreme ne bude veći od sveukupne moguće količine opreme tijekom INSERT-a.
Prati se da u određenom razdoblju tj. misiji to ne bude prekoračeno. 																			*/

DROP TRIGGER IF EXISTS i_kol_op;

DELIMITER //
CREATE TRIGGER i_kol_op
    BEFORE INSERT ON izdana_oprema
    FOR EACH ROW
BEGIN
	DECLARE id_zadane_misije INTEGER;
    DECLARE br INTEGER;
    DECLARE uk INTEGER;
    
    SELECT id_misija INTO id_zadane_misije
    FROM osoblje_na_misiji
    WHERE osoblje_na_misiji.id = new.id_osoblje_na_misiji;
    
    SELECT SUM(izdana_kolicina) INTO br
    FROM izdana_oprema
    INNER JOIN osoblje_na_misiji
    ON izdana_oprema.id_osoblje_na_misiji = osoblje_na_misiji.id
    WHERE id_oprema = new.id_oprema AND id_misija = id_zadane_misije;
    
    SELECT ukupna_kolicina INTO uk
    FROM oprema
    WHERE id = new.id_oprema;

    IF br + new.izdana_kolicina > uk THEN
	SIGNAL SQLSTATE '40000'
        SET MESSAGE_TEXT = 'Oprema koju zelite unijeti nije dostupna u zeljenoj kolicini!';
    END IF;
END//
DELIMITER ;



																																	/*
Prati se da zbroj izdane količine ne bude veći od sveukupne moguće količine opreme tijekom UPDATE-a
Prati se da u određenom razdoblju tj. misiji to ne bude prekoračeno.																*/

DROP TRIGGER IF EXISTS u_kol_op;

DELIMITER //
CREATE TRIGGER u_kol_op
    BEFORE UPDATE ON izdana_oprema
    FOR EACH ROW
BEGIN
	DECLARE id_zadane_misije INTEGER;
    DECLARE br INTEGER;
    DECLARE uk INTEGER;

    SELECT id_misija INTO id_zadane_misije
    FROM osoblje_na_misiji
    WHERE osoblje_na_misiji.id = new.id_osoblje_na_misiji;
    
    SELECT SUM(izdana_kolicina) INTO br
    FROM izdana_oprema
    INNER JOIN osoblje_na_misiji
    ON izdana_oprema.id_osoblje_na_misiji = osoblje_na_misiji.id
    WHERE id_oprema = new.id_oprema AND id_misija = id_zadane_misije;

    SELECT ukupna_kolicina INTO uk
    FROM oprema
    WHERE id = new.id_oprema;

    IF (br - old.izdana_kolicina) + new.izdana_kolicina > uk THEN
	SIGNAL SQLSTATE '40000'
        SET MESSAGE_TEXT = 'Ne mozete promijenit kolicinu zeljene opreme koja je izdana osobi zato jer nije dostupna u toj kolicini!';
    END IF;
END//
DELIMITER ;



