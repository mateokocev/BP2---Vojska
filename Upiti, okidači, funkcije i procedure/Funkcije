-- Funkcija vraca ukupni trosak

DELIMITER //
CREATE FUNCTION trosak() RETURNS DECIMAL(12,2)
DETERMINISTIC
BEGIN
    DECLARE ukupno_misija, ukupni_popravak, ukupno_lijecenje DECIMAL(8,2);

    SELECT SUM(trosak_misije) INTO ukupno_misija
    FROM misija;

    SELECT SUM(trosak_popravka) INTO ukupni_popravak
    FROM popravak;

    SELECT SUM(trosak_lijecenja) INTO ukupno_lijecenje
    FROM lijecenje;

    RETURN ukupno_misija + ukupni_popravak + ukupno_lijecenje;
END//
DELIMITER ;

SELECT trosak() AS ukupni_trosak FROM DUAL;



-- Funkcija racuna koliko je novca ostalo "viska" iz proracuna:

DELIMITER //
CREATE FUNCTION visak() RETURNS DECIMAL(12,2)
DETERMINISTIC
BEGIN
    DECLARE proracun_svih_sektora DECIMAL(12,2);

    SELECT SUM(ukupni_proracun) INTO proracun_svih_sektora
    FROM sektor;

    RETURN proracun_svih_sektora - trosak();
END//
DELIMITER ;

SELECT visak() AS visak FROM DUAL;



-- Funkcija koja vraća broj osoblja koje je imalo uvijek perofrmans na treningu viši od 6 te da nikad nisu bili na liječenju.

DROP FUNCTION IF EXISTS br_os_tr_i_li;

DELIMITER //
CREATE FUNCTION br_os_tr_i_li() RETURNS INTEGER
DETERMINISTIC
BEGIN
    DECLARE br_os_tr_li INTEGER;

	CREATE TEMPORARY TABLE br_perf_veci_od_sest
    SELECT id_osoblje, COUNT(*) AS br_perf_vece_sest
    FROM osoblje_na_treningu
    WHERE performans > 6
    GROUP BY id_osoblje;
    
    CREATE TEMPORARY TABLE br_perf_po_osobi
	SELECT id_osoblje AS id_os, COUNT(*) AS br_perf
    FROM osoblje_na_treningu
    GROUP BY id_osoblje;

	SELECT COUNT(*) INTO br_os_tr_li
    FROM
	(SELECT id_osoblje
    FROM br_perf_veci_od_sest
    INNER JOIN br_perf_po_osobi
    ON br_perf_veci_od_sest.id_osoblje = br_perf_po_osobi.id_os
    WHERE br_perf_vece_sest = br_perf) AS l
    WHERE id_osoblje 
	NOT IN (SELECT id_osoblje FROM lijecenje);

	DROP TEMPORARY TABLE br_perf_veci_od_sest;
    DROP TEMPORARY TABLE br_perf_po_osobi;

    RETURN br_os_tr_li;
END//
DELIMITER ;

SELECT  br_os_tr_i_li() AS br_osoblja_dobar_performans_nikad_na_lijecenju FROM DUAL;



/*
Za određeni id osoblja treba se dati tekstualni odgovor u čemu je sve osoba sujelovala. 
Npr. "Arabela Herceg je sudjelovala u najmanje jednoj/m: treningu i lijecenju."
Moguće je više kombinacija, a najduža je npr "Arabela Herceg je sudjelovao/la u najmanje 
jednoj: turi, misiji,treningu i lijecenju." U slučaju da osoba nije sudjelovala još uvijek u ničemu bit će ispisano npr 
"Arabela Herceg nije sudjelovao/la ni u jednoj: turi, misiji,treningu ili lijecenju."
*/

DROP FUNCTION IF EXISTS os_sudjelovanje;

DELIMITER //
CREATE FUNCTION os_sudjelovanje(id_os INTEGER) RETURNS VARCHAR(100)
DETERMINISTIC
BEGIN
    DECLARE odg VARCHAR(100);
	DECLARE brojac INTEGER;
    DECLARE tura VARCHAR(20);
    DECLARE misija VARCHAR(20);
    DECLARE trening VARCHAR(20);
    DECLARE lijecenje VARCHAR(20);
    
	SELECT CONCAT(ime, " ",prezime) INTO odg
    FROM osoblje 
    WHERE id = id_os;

	IF id_os IN (SELECT id_osoblje FROM osoblje_na_turi) THEN
		SET tura = " turi,";
        SET brojac = brojac + 1;
	ELSE  
		SET tura = "";
	END IF;


    IF id_os IN (SELECT id_osoblje FROM osoblje_na_misiji) THEN
		SET misija = " misiji,";
        SET brojac = brojac + 1;
	ELSE  
		SET misija = "";
	END IF;
    
    IF id_os IN (SELECT id_osoblje FROM osoblje_na_treningu) THEN
		SET trening = " treningu,";
        SET brojac = brojac + 1;
	ELSE  
		SET trening = "";
	END IF;
    
    IF id_os IN (SELECT id_osoblje FROM lijecenje) THEN
		SET lijecenje = " lijecenju,";
        SET brojac = brojac + 1;
	ELSE  
		SET lijecenje = "";
	END IF;
    
    
    IF brojac = 0 THEN 
		SET odg = CONCAT(odg," nije sudjelovao/la ni u jednoj: turi, misiji,treningu ili lijecenju.");
    ELSE 
		SET odg = CONCAT(odg," je sudjelovao/la u najmanje jednoj:", tura, misija, trening, lijecenje);
	END IF;	
    
    SET odg = CONCAT(LEFT(odg, LENGTH(odg)-3),".");
    
    RETURN odg;
END//
DELIMITER ;

SELECT os_sudjelovanje(10009) AS os_sudjelovanje FROM DUAL;





/*
Performans na treningu može bit od 1 do 10 ([1,10]). Želi se pratiti koliki je bio broj osoblja po određenom činu s pojedinom
ocijenom performansa. Ne treba prikazat čin čije osoblje uopće nije dio tog performansa.
Format treba izgledat kao:
performans   cinovi_i_br_pojavljivanja
10            skupnik: 3 , brigadir: 3 , bojnik: 1 , pukovnik: 1 , poručnik: 2 , narednik: 2 
9             pozornik: 1 , narednik: 2 , bojnik: 3 , satnik: 1 , brigadir: 2 , poručnik: 2 , skupnik: 1 , razvodnik: 1 
...           ...
*/

DROP FUNCTION IF EXISTS performans_cinovi;

DELIMITER //
CREATE FUNCTION performans_cinovi(perf INTEGER) RETURNS VARCHAR(500)
DETERMINISTIC
BEGIN
    DECLARE red VARCHAR(100);
    DECLARE cin_i_br_pojavljivanja VARCHAR(800)  DEFAULT "";
    DECLARE finished INTEGER DEFAULT 0;

	DECLARE cur CURSOR FOR
	SELECT CONCAT(LOWER(cin), ": ",COUNT(*)) AS perf_des
	FROM osoblje_na_treningu
	INNER JOIN osoblje ON osoblje.id = osoblje_na_treningu.id_osoblje
	WHERE performans = perf
	GROUP BY cin;
 
	DECLARE CONTINUE HANDLER 
	FOR SQLSTATE '02000' SET finished = 1;

	OPEN cur;
		 iteriraj_cinove: LOOP
			 FETCH cur INTO red;
             
			 IF finished = 1 THEN
				LEAVE iteriraj_cinove;
			 END IF;
             
			 SET cin_i_br_pojavljivanja = CONCAT(cin_i_br_pojavljivanja, ", ", red, " ");
             
		 END LOOP iteriraj_cinove;
	CLOSE cur;
    
    SET cin_i_br_pojavljivanja = TRIM(LEADING "," FROM cin_i_br_pojavljivanja);
    
    RETURN cin_i_br_pojavljivanja;
END //
DELIMITER ;

SELECT DISTINCT performans, performans_cinovi(performans) AS cinovi_i_br_pojavljivanja
FROM osoblje_na_treningu
ORDER BY performans DESC;


-- MK

-- Jednostavna funkcija koja vraća broj osoblja u određenom sektoru
DELIMITER //
CREATE FUNCTION broj_osoblja_u_sektoru( p_id_sektor INTEGER) RETURNS INTEGER
DETERMINISTIC
BEGIN
	DECLARE broj INTEGER;
    
	SELECT COUNT(*) INTO broj 
		FROM osoblje 
			WHERE id_sektor = p_id_sektor;
            
  RETURN broj;
END//
DELIMITER ;

-- primjer unkcije koja koristi while loop, imamo varijable u koje cemo spremati potrebne podatke i imamo veliki varchar u koji će ići rezultat, sa jednostavnim while loopom smo prosli kroz sve id-eve sektora te u svakoj iteraciji vezali rezultat sa concatom
DELIMITER //
CREATE FUNCTION prosjecna_ocjena_po_sektoru() RETURNS VARCHAR(1000)
DETERMINISTIC
BEGIN
	DECLARE p_id_sektor INTEGER;
	DECLARE broj_osoblja INTEGER;
	DECLARE sum_ocjena INTEGER;
	DECLARE prosjek DECIMAL(3,2);
	DECLARE rezultat VARCHAR(1000) DEFAULT '';

	SELECT id INTO p_id_sektor
		FROM sektor;

	WHILE p_id_sektor IS NOT NULL DO

		SELECT COUNT(*) INTO broj_osoblja 
			FROM osoblje 
				WHERE id_sektor = p_id_sektor;
		SELECT SUM(ocjena) INTO sum_ocjena 
			FROM osoblje 
				WHERE id_sektor = p_id_sektor;
                
		SET prosjek = sum_ocjena / broj_osoblja;

		SET rezultat = CONCAT(rezultat, 'Sektor ', (SELECT naziv FROM sektor AS s WHERE s.id =p_id_sektor), ': ', prosjek, CHAR(10));

		SELECT id INTO p_id_sektor
			FROM sektor WHERE id > p_id_sektor 
				ORDER BY id ASC
                LIMIT 1;
	END WHILE;
    
    RETURN rezultat;
END//
DELIMITER ;
-- SELECT prosjecna_ocjena_po_sektoru() AS rezultat;


-- varijacija prijašnje funkcije samo što sam koristio kursor i repeat čisto za promjenu :) masu vremena su mi potrošila ova dva
DELIMITER //
CREATE FUNCTION trosak_misija_po_sektoru() RETURNS VARCHAR(1000)
DETERMINISTIC
BEGIN
	DECLARE p_id_sektor INTEGER;
	DECLARE ukupni_trosak DECIMAL(20,2);
	DECLARE rezultat VARCHAR(1000) DEFAULT '';
	DECLARE cur CURSOR FOR SELECT id FROM sektor;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET p_id_sektor = NULL;

	OPEN cur;
		REPEAT
			FETCH cur INTO p_id_sektor;

			SELECT SUM(trosak_misije) INTO ukupni_trosak 
				FROM misija AS m
				INNER JOIN osoblje_na_misiji AS onm ON m.id = onm.id_misija
				INNER JOIN osoblje AS o ON o.id = onm.id_osoblje
					WHERE o.id_sektor = p_id_sektor;

			SET rezultat = CONCAT(rezultat, 'Sektor ', (SELECT naziv FROM sektor AS s WHERE s.id = p_id_sektor), ': ', ukupni_trosak, CHAR(10));
			
		UNTIL p_id_sektor IS NULL
		END REPEAT;
	CLOSE cur;
  
	RETURN rezultat;
END//
DELIMITER ;


-- primjer funkcije koja poziva drugu funkciju, jedna provjerava je li ta osoba na misiji tj. gleda postoji li ongoing misija gdje je ta osoba te vraca true or false
-- onda sa tom informacijom i provjerom dobi sa selekcijom u glavnoj funkciji odlućujemo je li dobar odabir za misiju :)
DELIMITER //
CREATE FUNCTION osoblje_na_misiji_mod(p_id_osoblje INTEGER) RETURNS BOOLEAN
DETERMINISTIC
BEGIN
	DECLARE jeilinije BOOLEAN DEFAULT FALSE;
    
    SELECT EXISTS(
		SELECT 1
			FROM osoblje AS o
			INNER JOIN osoblje_na_misiji AS onm ON o.id = onm.id_osoblje
			INNER JOIN misija AS m ON onm.id_misija = m.id
			INNER JOIN lokacija AS l ON m.id_lokacija = l.id
				WHERE m.vrijeme_kraja IS NULL AND o.id = p_id_osoblje
		) INTO jeilinije;
	RETURN jeilinije;
END//
DELIMITER ;
-- --------
DELIMITER //
CREATE FUNCTION dostupnost_za_misiju(p_id_osoblje INTEGER, p_dob_misija INTEGER) RETURNS VARCHAR(30)
DETERMINISTIC
BEGIN
	DECLARE trenutna_dob INTEGER;
    DECLARE jeilinije BOOLEAN DEFAULT FALSE;

	SELECT (DATEDIFF(NOW(), o.datum_rodenja) DIV 365.25) INTO trenutna_dob
		FROM osoblje AS o
			WHERE o.id = p_id_osoblje;

	SELECT osoblje_na_misiji_mod(p_id_osoblje) INTO jeilinije;

    IF NOT jeilinije AND trenutna_dob <= p_dob_misija THEN
        RETURN 'Dostupan';
    ELSE
        RETURN 'Nedostupan';
    END IF;
END//
DELIMITER ;