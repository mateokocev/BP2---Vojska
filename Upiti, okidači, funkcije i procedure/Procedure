-- PROCEDURE:	
    
 -- DK 
 
 
 -- Za određeni id_osoblja treba vratit koliko je sati proveo/la na misiji, na treningu a koliko na liječenju.

     
DROP PROCEDURE IF EXISTS sati_provedeno_osoblje;

DELIMITER //
CREATE PROCEDURE sati_provedeno_osoblje(IN id_os INTEGER, OUT misija_h INTEGER, OUT trening_h INTEGER, OUT lijecenje_h INTEGER)
DETERMINISTIC
BEGIN

	SELECT SUM(TIMESTAMPDIFF(DAY, vrijeme_pocetka, vrijeme_kraja)) INTO misija_h
    FROM misija
    INNER JOIN osoblje_na_misiji
    ON misija.id = osoblje_na_misiji.id_misija
    WHERE id_osoblje = id_os;
    
    SELECT IFNULL(misija_h, 0) INTO misija_h;
    
    SELECT SUM(TIMESTAMPDIFF(DAY, vrijeme_pocetka, vrijeme_kraja)) INTO trening_h
    FROM trening
    INNER JOIN osoblje_na_treningu
    ON trening.id = osoblje_na_treningu.id_trening
    WHERE id_osoblje = id_os;
    
    SELECT IFNULL(trening_h, 0) INTO trening_h;
    
    SELECT SUM(TIMESTAMPDIFF(DAY, pocetak_lijecenja, kraj_lijecenja)) INTO lijecenje_h
    FROM lijecenje
    WHERE id_osoblje = id_os;

	SELECT IFNULL(lijecenje_h, 0) INTO lijecenje_h;

END//
DELIMITER ;

CALL sati_provedeno_osoblje(10322, @h_m, @h_t, @h_l);
SELECT @h_m AS sati_provedeni_na_misiji, @h_t AS sati_provedeni_na_treningu, @h_l AS sati_provedeni_na_lijecenju FROM DUAL;  
     
     
     
  /*
  Za određeni iznos novca se gleda da li bi taj novac mogao pokriti troškove najmanje pola misija te vraća odgovor
  'DA' ili 'NE'
  */
     
DROP PROCEDURE IF EXISTS novac_misije;

DELIMITER //
CREATE PROCEDURE novac_misije(IN iznos DECIMAL(30, 2), OUT odg CHAR(2))
DETERMINISTIC
BEGIN
	DECLARE br_pola_misija INTEGER;
    DECLARE trosak_najmanje_polovice DECIMAL(30, 2);

	SELECT (COUNT(*)/2) INTO br_pola_misija
	FROM misija;
		 
	SELECT SUM(trosak_misije) INTO trosak_najmanje_polovice
	FROM misija
	ORDER BY trosak_misije ASC
	LIMIT br_pola_misija;

	IF iznos >= trosak_najmanje_polovice THEN
		SET odg = 'DA';
	ELSE 
		SET odg = 'NE';
	END IF;
END//
DELIMITER ;

CALL novac_misije(30000000, @odg);
SELECT @odg AS Da_li_iznos_pokriva_troskove_pola_misija FROM DUAL;
 
 
 
 
 /*
Za dva vremenska intervala (pojedini će biti određen s dvije datumske vrijednosti) se mora odrediti  pojedinačni 
ukupni trošak za misije, ukupni trošak za popravak, ukupni trošak za liječenje te usporedit. 
Ispis treba biti u obliku:
	Vremensko razdoblje od 1.10.1991. do 11.07.1998. ima manji trošak kada je riječ o misijama u usporedbi s razdobljem od 23.04.1997. do 2.12.2001..
    Vremensko razdoblje od 23.04.1997. do 2.12.2001. ima manji trošak kada je riječ o popravcima u usporedbi s razdobljem od 1.10.1991. do 11.07.1998..
    Vremensko razdoblje od 1.10.1991. do  11.07.1998. ima manji trošak kada je riječ liječenju u usporedbi s razdobljem od 23.04.1997. do 2.12.2001..
*/

DROP PROCEDURE IF EXISTS usporedba;

DELIMITER //
CREATE PROCEDURE usporedba(IN prvi_datum_p DATETIME, IN prvi_datum_k DATETIME, IN drugi_datum_p DATETIME, IN drugi_datum_k DATETIME, OUT txt_mi VARCHAR(200), OUT txt_po VARCHAR(200), OUT txt_li VARCHAR(200))
BEGIN
	DECLARE prvo_misija NUMERIC(15, 2);
    DECLARE prvo_popravak NUMERIC(15, 2);
    DECLARE prvo_lijecenje NUMERIC(15, 2);
    
    DECLARE drugo_misija NUMERIC(15, 2);
    DECLARE drugo_popravak NUMERIC(15, 2);
    DECLARE drugo_lijecenje NUMERIC(15, 2);
    
    SELECT SUM(trosak_misije) INTO prvo_misija
    FROM misija
    WHERE vrijeme_pocetka >= prvi_datum_p AND vrijeme_kraja <= prvi_datum_k;
    
    SELECT SUM(trosak_misije) INTO drugo_misija
    FROM misija
    WHERE vrijeme_pocetka >= drugi_datum_p AND vrijeme_kraja <= drugi_datum_k;
    
    IF prvo_misija = drugo_misija THEN
		SET txt_mi = CONCAT("Vremensko razdoblje od ", prvi_datum_p," do ", prvi_datum_k, " ima isti trošak kada je riječ o misijama u usporedbi s razdobljem od ",  drugi_datum_p, " do ", drugi_datum_k);
	ELSEIF prvo_misija > drugo_misija THEN
		SET txt_mi = CONCAT("Vremensko razdoblje od ", prvi_datum_p," do ", prvi_datum_k, " ima veći trošak kada je riječ o misijama u usporedbi s razdobljem od ",  drugi_datum_p, " do ", drugi_datum_k);
	ELSE
		SET txt_mi = CONCAT("Vremensko razdoblje od ", prvi_datum_p," do ", prvi_datum_k, " ima manji trošak kada je riječ o misijama u usporedbi s razdobljem od ",  drugi_datum_p, " do ", drugi_datum_k);
	END IF;
    
    
	SELECT SUM(trosak_popravka) INTO prvo_popravak
    FROM popravak
    WHERE pocetak_popravka >= prvi_datum_p AND kraj_popravka <= prvi_datum_k;
    
    SELECT SUM(trosak_popravka) INTO drugo_popravak
    FROM popravak
    WHERE pocetak_popravka >= drugi_datum_p AND kraj_popravka <= drugi_datum_k;
    
    IF prvo_popravak = drugo_popravak THEN
		SET txt_po = CONCAT("Vremensko razdoblje od ", prvi_datum_p," do ", prvi_datum_k, " ima isti trošak kada je riječ o popravcima u usporedbi s razdobljem od ",  drugi_datum_p, " do ", drugi_datum_k);
	ELSEIF prvo_popravak > drugo_popravak THEN
		SET txt_po = CONCAT("Vremensko razdoblje od ", prvi_datum_p," do ", prvi_datum_k, " ima veći trošak kada je riječ o popravcima u usporedbi s razdobljem od ",  drugi_datum_p, " do ", drugi_datum_k);
	ELSE
		SET txt_po = CONCAT("Vremensko razdoblje od ", prvi_datum_p," do ", prvi_datum_k, " ima manji trošak kada je riječ o popravcima u usporedbi s razdobljem od ",  drugi_datum_p, " do ", drugi_datum_k);
	END IF;
    
    
    SELECT SUM(trosak_lijecenja) INTO prvo_lijecenje
    FROM lijecenje
    WHERE pocetak_lijecenja >= prvi_datum_p AND kraj_lijecenja <= prvi_datum_k;

    SELECT SUM(trosak_lijecenja) INTO drugo_lijecenje
    FROM lijecenje
    WHERE pocetak_lijecenja >= drugi_datum_p AND kraj_lijecenja <= drugi_datum_k;

	IF prvo_lijecenje = drugo_lijecenje THEN
		SET txt_li = CONCAT("Vremensko razdoblje od ", prvi_datum_p," do ", prvi_datum_k, " ima isti trošak kada je riječ o lijecenju u usporedbi s razdobljem od ",  drugi_datum_p, " do ", drugi_datum_k);
	ELSEIF prvo_lijecenje > drugo_lijecenje THEN
		SET txt_li = CONCAT("Vremensko razdoblje od ", prvi_datum_p," do ", prvi_datum_k, " ima veći trošak kada je riječ o lijecenju u usporedbi s razdobljem od ",  drugi_datum_p, " do ", drugi_datum_k);
	ELSE
		SET txt_li = CONCAT("Vremensko razdoblje od ", prvi_datum_p," do ", prvi_datum_k, " ima manji trošak kada je riječ o lijecenju u usporedbi s razdobljem od ",  drugi_datum_p, " do ", drugi_datum_k);
	END IF;

END //
DELIMITER ;

CALL usporedba(STR_TO_DATE("1.10.1991.  12:37:13", "%d.%m.%Y. %H:%i:%s"), STR_TO_DATE("1.10.2013.  12:37:13", "%d.%m.%Y. %H:%i:%s"), 
			   STR_TO_DATE("1.10.1995.  10:45:10", "%d.%m.%Y. %H:%i:%s"), STR_TO_DATE("1.10.2011.  19:37:16", "%d.%m.%Y. %H:%i:%s"),
@usp_mi, @usp_po, @usp_li);
SELECT  @usp_mi AS rez_usporedbe_misija, @usp_po AS rez_usporedbe_popravci, @usp_li AS rez_usporedbe_lijecenje FROM DUAL;
 
 
 
 
          /*
Ispisati koliki je broj osoblja, vozila, opreme trenutačno dostupno(3 vrijednosti) u danom intervalu (dva datuma
koje korisnik izabere kao ulazne argumente          																				*/

DROP PROCEDURE IF EXISTS br_dostupnog_os_vo_op;

DELIMITER //
CREATE PROCEDURE br_dostupnog_os_vo_op(IN datum_p DATETIME, IN datum_k DATETIME, OUT dost_os INT, OUT dost_vo INT, OUT dost_op INT)
DETERMINISTIC
BEGIN
   DECLARE oduzet_br_voz INTEGER;
   DECLARE oduzet_br_op INTEGER;
   
   SELECT COUNT(*) INTO dost_os
   FROM osoblje 
   WHERE id NOT IN
    (SELECT DISTINCT id_osoblje
    FROM osoblje_na_treningu
    INNER JOIN trening
    ON trening.id = osoblje_na_treningu.id_trening
    WHERE (datum_p > vrijeme_pocetka AND datum_p < vrijeme_kraja) OR (datum_k > vrijeme_pocetka AND datum_k < vrijeme_kraja)
    UNION
	SELECT DISTINCT id_osoblje
    FROM lijecenje
    WHERE (datum_p > pocetak_lijecenja AND datum_p < kraj_lijecenja) OR (datum_k > pocetak_lijecenja AND datum_k < kraj_lijecenja)
    UNION
    SELECT DISTINCT id_osoblje
    FROM osoblje_na_turi
    WHERE (datum_p > datum_pocetka AND datum_p < datum_kraja) OR (datum_k > datum_pocetka AND datum_k < datum_kraja));
    
    
    
   SELECT SUM(ukupna_kolicina) INTO dost_vo
   FROM vozila;
    
   SELECT SUM(br_voz_zauzet) INTO oduzet_br_voz
   FROM
   (SELECT COUNT(*) AS br_voz_zauzet
   FROM popravak 
   INNER JOIN vozilo_na_misiji
   ON popravak.id_vozilo_na_misiji = vozilo_na_misiji.id
   WHERE (datum_p > pocetak_popravka AND datum_p < kraj_popravka) OR (datum_k > pocetak_popravka AND datum_k < kraj_popravka)
   UNION ALL
   SELECT SUM(kolicina) AS br_voz_zauzet
   FROM misija
   INNER JOIN vozilo_na_misiji
   ON misija.id = vozilo_na_misiji.id
   WHERE (datum_p > vrijeme_pocetka AND datum_p < vrijeme_kraja) OR (datum_k > vrijeme_pocetka AND datum_k < vrijeme_kraja)) AS l;
   
   SET dost_vo = dost_vo - oduzet_br_voz;
    
    
    
    SELECT SUM(ukupna_kolicina) INTO dost_op
    FROM oprema;
    
    SELECT SUM(izdana_kolicina) INTO oduzet_br_op
    FROM izdana_oprema
    INNER JOIN osoblje_na_misiji
    ON osoblje_na_misiji.id = izdana_oprema.id_osoblje_na_misiji
    INNER JOIN 
    (SELECT id
    FROM misija
    WHERE (datum_p > vrijeme_pocetka AND datum_p < vrijeme_kraja) OR (datum_k > vrijeme_pocetka AND datum_k < vrijeme_kraja)) AS l
    ON l.id = osoblje_na_misiji.id_misija;
    
    SET dost_op = dost_op - oduzet_br_op;
END//
DELIMITER ;

CALL br_dostupnog_os_vo_op(STR_TO_DATE("1.10.1991.  12:37:13", "%d.%m.%Y. %H:%i:%s"), 
STR_TO_DATE("1.10.2013.  12:37:13", "%d.%m.%Y. %H:%i:%s"), @a, @b, @c);
SELECT  @a AS br_dostupnog_osoblja, @b AS br_dostupnih_vozila, @c AS br_dostupne_opreme FROM DUAL;





/*
Treba odrediti koje misije su održane na području sjeverne polutke, a koje na području južne polutke. Prilikom 
navoda se koristi naziv misije. Format mora bit sličan: 
  Misije održane na sjevernoj polutci: naziv1, naziv2, ...
  Misije održane na južnoj polutci: naziv1, naziv2, ...
  Misije održane na ekvatoru: naziv1, naziv2, ...
*/

DROP PROCEDURE IF EXISTS polutke_misije;

DELIMITER //
CREATE PROCEDURE polutke_misije(OUT sj_misije VARCHAR(1000), OUT ju_misije VARCHAR(1000), OUT ekv_misije VARCHAR(1000))
BEGIN
	DECLARE ime_misije VARCHAR(50) ;
    DECLARE sirina DECIMAL(10, 7);
	DECLARE finished INTEGER DEFAULT 0;

    DECLARE cur CURSOR FOR
	SELECT misija.naziv, zemljopisna_sirina
	FROM misija
	INNER JOIN lokacija
	ON misija.id_lokacija = lokacija.id;

	DECLARE CONTINUE HANDLER
	FOR SQLSTATE '02000' SET finished = 1;

	SET sj_misije = "Misije održane na sjevernoj polutci: ";
    SET ju_misije = "Misije održane na južnoj polutci: ";
    SET ekv_misije = "Misije održane na ekvatoru: ";

	OPEN cur;
		iteriraj_kordinate: LOOP

			FETCH cur INTO ime_misije, sirina;

			IF finished = 1 THEN
			   LEAVE iteriraj_kordinate;
			END IF;
            
            IF sirina > 0 THEN
				SET sj_misije = CONCAT(sj_misije, ime_misije, ", ");
			ELSEIF sirina < 0 THEN
				SET ju_misije = CONCAT(ju_misije, ime_misije, ", ");
			ELSE
				SET ekv_misije = CONCAT(ekv_misije, ime_misije, ", ");
			END IF;
            
	  END LOOP iteriraj_kordinate;
  CLOSE cur;
	 
  SET sj_misije = TRIM(TRAILING ", " FROM sj_misije);
  SET ju_misije = TRIM(TRAILING ", " FROM ju_misije);
  SET ekv_misije = TRIM(TRAILING ", " FROM ekv_misije);
END //
DELIMITER ;

CALL polutke_misije(@sj_naziv, @ju_naziv, @ekv_naziv);

SELECT @sj_naziv AS nazivi_misija FROM DUAL
UNION
SELECT @ju_naziv FROM DUAL
UNION 
SELECT @ekv_naziv FROM DUAL;






-- MK

-- --------------------------------------------------------------------------------------------
-- PROCEDURE
-- --------------------------------------------------------------------------------------------

-- jednostavna procedura za promjenu statusa osoblja. Ima 2 IN parametra jedan za ID i jedan za status te koristi jednostavnu update komandu da promjeni status
DELIMITER //
CREATE PROCEDURE promjena_statusa_osoblja(IN p_id_osoblje INT, IN p_status_osoblja VARCHAR(50))
BEGIN
	UPDATE osoblje
		SET status_osoblja = p_status_osoblja
			WHERE id = p_id_osoblje;
END//
DELIMITER ;


-- procedura za pogledati svo aktivno osoblje koje se trenutno nalazi na misiji preko jednostavnog upita koji spaja nekoliko tablica sa inner joinom
DELIMITER //
CREATE PROCEDURE svo_osoblje_na_misiji()
BEGIN
	SELECT o.*, m.naziv, l.naziv
		FROM osoblje AS o
        INNER JOIN osoblje_na_misiji AS onm ON o.id = onm.id_osoblje
        INNER JOIN misija AS m ON onm.id_misija = m.id
        INNER JOIN lokacija AS l ON m.id_lokacija = l.id
			WHERE m.id.vrijeme_kraja IS NULL;
END//
DELIMITER ;


-- primjer procedure koji ovisno o performansi na zadnjem treningu povecava ocjenu ili ju smanjuje i onda preporucuje da osoblje dobije promociju ili ne
DELIMITER //
CREATE PROCEDURE provjera_promocija_sniženje_cin(IN p_id_osoblje INT)
BEGIN
    DECLARE p_ocjena INT;
    DECLARE p_performans INT;

    SELECT ocjena INTO p_ocjena
		FROM osoblje
			WHERE id = p_id_osoblje;
	
	SELECT performans INTO p_performans
        FROM osoblje_na_treningu
			WHERE id_osoblje = p_id_osoblje AND datum_kraja IS NOT NULL
			ORDER BY datum_pocetka DESC
			LIMIT 1;

    IF p_performans < 4 THEN
        SET p_ocjena = ocjena - 5;
    ELSEIF p_performans < 5 THEN
        SET p_ocjena = ocjena - 3;
    ELSEIF p_performans < 6 THEN
        SET p_ocjena = ocjena - 1;
    ELSEIF p_performans >= 9 THEN
        SET p_ocjena = ocjena + 5;
    ELSEIF p_performans >= 8 THEN
        SET p_ocjena = ocjena + 3;
    ELSEIF p_performans >= 7 THEN
        SET p_ocjena = ocjena + 1;
    END IF;

	IF p_ocjena < 1 THEN
		SET p_ocjena = 1;
		SIGNAL SQLSTATE '40000'
			SET MESSAGE_TEXT = 'Ocjena je prešla najniže prihvatljive razine te se preporućuje sniženje čina';
	ELSEIF p_ocjena > 5 THEN
		SET p_ocjena = 5;
		SIGNAL SQLSTATE '40000'
			SET MESSAGE_TEXT = 'Ocjena je prešla najvišu razinu te se preporućuje povečanje čina';
	ELSE
		UPDATE osoblje
			SET ocjena = p_ocjena
				WHERE id = p_id_osoblje;
	END IF;
END//
DELIMITER ;


-- promjeni status osoblja ako nije bio na treningu ili na turi u zadnjih godinu dana
DELIMITER //
CREATE PROCEDURE promjena_statusa_na_neaktivan()
BEGIN
    UPDATE osoblje
    SET status_osoblja = 'neaktivan'
    WHERE status_osoblja = 'aktivan' AND id NOT IN (SELECT id_osoblje FROM osoblje_na_turi WHERE datum_kraja > DATE_SUB(NOW(), INTERVAL 1 YEAR)) AND id NOT IN (SELECT id_osoblje FROM osoblje_na_treningu WHERE datum_kraja > DATE_SUB(NOW(), INTERVAL 1 YEAR));
END //
DELIMITER ;


-- Svo osoblje u određenom sektoru koje nije mrtvo 
DELIMITER //
CREATE PROCEDURE ukupno_osoblje_u_sektoru(IN p_id_sektor INT)
BEGIN
    SELECT COUNT(*)
    FROM osoblje
    WHERE id_sektor = p_id_sektor;
END//
DELIMITER ;
